---
// AdminLogin.astro
---

<div
  class="min-h-screen flex items-center justify-center bg-gradient-to-br from-glehi-lightest via-glehi-light2 to-glehi-light1 py-12 px-4 sm:px-6 lg:px-8"
>
  <div class="max-w-md w-full space-y-8">
    <!-- Header -->
    <div class="text-center">
      <div
        class="mx-auto h-16 w-16 bg-gradient-to-br from-glehi-medium to-glehi-kaki rounded-full flex items-center justify-center mb-6 shadow-lg"
      >
        <svg
          class="h-8 w-8 text-white"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"
          ></path>
        </svg>
      </div>
      <h2 class="text-3xl font-bold text-glehi-dark mb-2">
        Espace Administration
      </h2>
      <p class="text-glehi-graymid">
        Connectez-vous pour accéder au panneau d'administration
      </p>
    </div>

    <!-- Formulaire de connexion -->
    <div
      class="bg-white/90 backdrop-blur-sm rounded-2xl shadow-2xl p-8 border border-glehi-greenlight4"
    >
      <form class="space-y-6" id="loginForm">
        <!-- Champ Téléphone -->
        <div>
          <label
            for="phone"
            class="block text-sm font-medium text-glehi-dark mb-2"
          >
            Numéro de téléphone
          </label>
          <div class="relative">
            <input
              id="phone"
              name="phone"
              type="tel"
              required
              value="01"
              maxlength="10"
              pattern="01[0-9]{8}"
              class="w-full px-4 py-3 border border-glehi-greenlight4 rounded-xl focus:ring-2 focus:ring-glehi-medium focus:border-glehi-medium transition-all duration-200 bg-white/50 placeholder-glehi-graymid text-glehi-dark"
              placeholder="01XXXXXXXX"
            />
            <div class="absolute inset-y-0 right-0 flex items-center pr-3">
              <svg
                class="h-5 w-5 text-glehi-graymid"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"
                ></path>
              </svg>
            </div>
          </div>
          <div id="phoneError" class="hidden mt-2 text-sm text-red-600">
            Le numéro doit commencer par 01 et contenir exactement 10 chiffres
          </div>
        </div>

        <!-- Champ Mot de passe -->
        <div>
          <label
            for="password"
            class="block text-sm font-medium text-glehi-dark mb-2"
          >
            Mot de passe
          </label>
          <div class="relative">
            <input
              id="password"
              name="password"
              type="password"
              required
              minlength="8"
              class="w-full px-4 py-3 border border-glehi-greenlight4 rounded-xl focus:ring-2 focus:ring-glehi-medium focus:border-glehi-medium transition-all duration-200 bg-white/50 placeholder-glehi-graymid text-glehi-dark pr-10"
              placeholder="••••••••"
            />
            <button
              type="button"
              class="absolute inset-y-0 right-0 flex items-center pr-3 text-glehi-graymid hover:text-glehi-medium transition-colors"
              onclick="togglePassword()"
            >
              <svg
                id="eyeOpen"
                class="h-5 w-5"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
                ></path>
              </svg>
              <svg
                id="eyeClosed"
                class="h-5 w-5 hidden"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L8.464 8.464M19.5 19.5l-15-15"
                ></path>
              </svg>
            </button>
          </div>
          <div id="passwordError" class="hidden mt-2 text-sm text-red-600">
            Le mot de passe doit contenir au moins 8 caractères
          </div>
          <div id="passwordStrength" class="mt-2">
            <div class="flex space-x-1">
              <div class="flex-1 h-2 bg-gray-200 rounded-full">
                <div
                  id="strengthBar"
                  class="h-full rounded-full transition-all duration-300"
                  style="width: 0%"
                >
                </div>
              </div>
            </div>
            <div id="strengthText" class="text-xs text-glehi-graymid mt-1">
            </div>
          </div>
        </div>

        <!-- Options supplémentaires -->
        <div class="flex items-center justify-between">
          <div class="flex items-center">
            <input
              id="remember-me"
              name="remember-me"
              type="checkbox"
              class="h-4 w-4 text-glehi-medium focus:ring-glehi-medium border-glehi-greenlight4 rounded transition-colors"
            />
            <label
              for="remember-me"
              class="ml-2 block text-sm text-glehi-graymid"
            >
              Se souvenir de moi
            </label>
          </div>
          <div class="text-sm">
            <a
              href="#"
              class="text-glehi-medium hover:text-glehi-kaki transition-colors font-medium"
            >
              Mot de passe oublié ?
            </a>
          </div>
        </div>

        <!-- Bouton de connexion -->
        <div>
          <button
            type="submit"
            id="submitButton"
            class="group relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-xl text-white bg-gradient-to-r from-glehi-medium to-glehi-kaki hover:from-glehi-dark hover:to-glehi-medium focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-glehi-medium transition-all duration-200 transform hover:scale-[1.02] active:scale-[0.98] shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
          >
            <span class="absolute left-0 inset-y-0 flex items-center pl-3">
              <svg
                class="h-5 w-5 text-white/70 group-hover:text-white/90 transition-colors"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1"
                ></path>
              </svg>
            </span>
            Se connecter
          </button>
        </div>

        <!-- Message d'erreur -->
        <div id="errorMessage" class="hidden">
          <div class="bg-red-50 border border-red-200 rounded-lg p-4">
            <div class="flex">
              <svg
                class="h-5 w-5 text-red-400"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"
                ></path>
              </svg>
              <div class="ml-3">
                <p class="text-sm text-red-700" id="errorText">
                  Identifiants incorrects. Veuillez réessayer.
                </p>
              </div>
            </div>
          </div>
        </div>
      </form>
    </div>

    <!-- Footer -->
    <div class="text-center text-xs text-glehi-graymid">
      <p>© 2025 - Espace Administration Sécurisé</p>
    </div>
  </div>
</div>

<script>
  // Configuration de l'API
  const API_URL = "YOUR_API_URL_HERE"; // Remplacez par votre URL d'API

  // Vérifier si l'utilisateur est déjà connecté au chargement de la page
  document.addEventListener("DOMContentLoaded", function () {
    checkAuthStatus();
    setupValidation();
  });

  // Fonction pour vérifier le statut d'authentification
  function checkAuthStatus() {
    const token = localStorage.getItem("admin_token");
    const userRole = localStorage.getItem("user_role");

    if (token && userRole === "admin") {
      // Vérifier si le token est encore valide
      verifyToken(token);
    } else {
      // Nettoyer le localStorage si les données sont incomplètes
      localStorage.removeItem("admin_token");
      localStorage.removeItem("user_role");
      localStorage.removeItem("user_data");
    }
  }

  // Fonction pour vérifier la validité du token
  async function verifyToken(token) {
    try {
      const response = await fetch(`${API_URL}/auth/verify`, {
        method: "GET",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
      });

      if (response.ok) {
        const data = await response.json();
        if (data.user && data.user.role === "admin") {
          // Token valide et utilisateur est admin, rediriger vers le dashboard
          window.location.href = "/admin/dashboard";
          return;
        }
      }

      // Token invalide ou utilisateur n'est pas admin
      clearAuthData();
    } catch (error) {
      console.error("Erreur lors de la vérification du token:", error);
      clearAuthData();
    }
  }

  // Fonction pour nettoyer les données d'authentification
  function clearAuthData() {
    localStorage.removeItem("admin_token");
    localStorage.removeItem("user_role");
    localStorage.removeItem("user_data");
  }

  // Configuration de la validation en temps réel
  function setupValidation() {
    const phoneInput = document.getElementById("phone");
    const passwordInput = document.getElementById("password");
    const submitButton = document.getElementById("submitButton");

    // Validation du téléphone
    phoneInput.addEventListener("input", function () {
      validatePhone();
      updateSubmitButton();
    });

    // Empêcher la saisie de caractères non numériques et maintenir le préfixe 01
    phoneInput.addEventListener("keydown", function (e) {
      const value = this.value;
      const cursorPos = this.selectionStart;

      // Empêcher la suppression du préfixe 01
      if ((e.key === "Backspace" || e.key === "Delete") && cursorPos <= 2) {
        e.preventDefault();
        return;
      }

      // Permettre les touches de navigation
      if (
        ["Backspace", "Delete", "ArrowLeft", "ArrowRight", "Tab"].includes(
          e.key
        )
      ) {
        return;
      }

      // Permettre seulement les chiffres
      if (!/[0-9]/.test(e.key)) {
        e.preventDefault();
      }
    });

    // Validation du mot de passe
    passwordInput.addEventListener("input", function () {
      validatePassword();
      updatePasswordStrength();
      updateSubmitButton();
    });

    // Validation initiale
    validatePhone();
    validatePassword();
    updateSubmitButton();
  }

  // Validation du numéro de téléphone
  function validatePhone() {
    const phoneInput = document.getElementById("phone");
    const phoneError = document.getElementById("phoneError");
    const value = phoneInput.value;

    // S'assurer que le numéro commence toujours par 01
    if (!value.startsWith("01")) {
      phoneInput.value = "01" + value.replace(/^01/, "");
    }

    const isValid = /^01[0-9]{8}$/.test(phoneInput.value);

    if (phoneInput.value.length > 2 && !isValid) {
      phoneError.classList.remove("hidden");
      phoneInput.classList.add("border-red-500");
      phoneInput.classList.remove("border-glehi-greenlight4");
    } else {
      phoneError.classList.add("hidden");
      phoneInput.classList.remove("border-red-500");
      phoneInput.classList.add("border-glehi-greenlight4");
    }

    return isValid;
  }

  // Validation du mot de passe
  function validatePassword() {
    const passwordInput = document.getElementById("password");
    const passwordError = document.getElementById("passwordError");
    const value = passwordInput.value;

    const isValid = value.length >= 8;

    if (value.length > 0 && !isValid) {
      passwordError.classList.remove("hidden");
      passwordInput.classList.add("border-red-500");
      passwordInput.classList.remove("border-glehi-greenlight4");
    } else {
      passwordError.classList.add("hidden");
      passwordInput.classList.remove("border-red-500");
      passwordInput.classList.add("border-glehi-greenlight4");
    }

    return isValid;
  }

  // Indicateur de force du mot de passe
  function updatePasswordStrength() {
    const passwordInput = document.getElementById("password");
    const strengthBar = document.getElementById("strengthBar");
    const strengthText = document.getElementById("strengthText");
    const value = passwordInput.value;

    if (value.length === 0) {
      strengthBar.style.width = "0%";
      strengthText.textContent = "";
      return;
    }

    let strength = 0;
    let feedback = [];

    // Critères de force
    if (value.length >= 8) strength += 20;
    if (value.length >= 12) strength += 10;
    if (/[a-z]/.test(value)) strength += 15;
    if (/[A-Z]/.test(value)) strength += 15;
    if (/[0-9]/.test(value)) strength += 15;
    if (/[^a-zA-Z0-9]/.test(value)) strength += 25;

    // Couleur et texte selon la force
    let color, text;
    if (strength < 30) {
      color = "#ef4444";
      text = "Très faible";
    } else if (strength < 50) {
      color = "#f97316";
      text = "Faible";
    } else if (strength < 70) {
      color = "#eab308";
      text = "Moyen";
    } else if (strength < 90) {
      color = "#22c55e";
      text = "Bon";
    } else {
      color = "#16a34a";
      text = "Très bon";
    }

    strengthBar.style.width = Math.min(strength, 100) + "%";
    strengthBar.style.backgroundColor = color;
    strengthText.textContent = text;
    strengthText.style.color = color;
  }

  // Mise à jour de l'état du bouton de soumission
  function updateSubmitButton() {
    const submitButton = document.getElementById("submitButton");
    const phoneValid = validatePhone();
    const passwordValid = validatePassword();

    submitButton.disabled = !(phoneValid && passwordValid);
  }

  // Fonction pour basculer la visibilité du mot de passe
  function togglePassword() {
    const passwordField = document.getElementById("password");
    const eyeOpen = document.getElementById("eyeOpen");
    const eyeClosed = document.getElementById("eyeClosed");

    if (!passwordField || !eyeOpen || !eyeClosed) return;

    if (passwordField.type === "password") {
      passwordField.type = "text";
      eyeOpen.classList.add("hidden");
      eyeClosed.classList.remove("hidden");
    } else {
      passwordField.type = "password";
      eyeOpen.classList.remove("hidden");
      eyeClosed.classList.add("hidden");
    }
  }

  // Gestion du formulaire de connexion
  const loginForm = document.getElementById("loginForm");
  if (loginForm) {
    loginForm.addEventListener("submit", async function (e) {
      e.preventDefault();

      const formData = new FormData(this);
      const phone = formData.get("phone");
      const password = formData.get("password");
      const rememberMe = formData.get("remember-me");

      // Validation finale
      if (!validatePhone() || !validatePassword()) {
        showError("Veuillez corriger les erreurs dans le formulaire.");
        return;
      }

      // Désactiver le bouton pendant la requête
      const submitButton = document.getElementById("submitButton");
      const originalText = submitButton.innerHTML;
      submitButton.disabled = true;
      submitButton.innerHTML = `
        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" fill="none" opacity="0.25"/>
          <path fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"/>
        </svg>
        Connexion en cours...
      `;

      try {
        const response = await fetch(`${API_URL}/auth/login`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            phone: phone.trim(),
            password: password,
          }),
        });

        const data = await response.json();

        if (response.ok && data.token && data.user) {
          // Vérifier que l'utilisateur est un admin
          if (data.user.role !== "admin") {
            showError(
              "Accès refusé. Seuls les administrateurs peuvent se connecter."
            );
            return;
          }

          // Stocker les données d'authentification
          localStorage.setItem("admin_token", data.token);
          localStorage.setItem("user_role", data.user.role);
          localStorage.setItem("user_data", JSON.stringify(data.user));

          // Optionnel : gérer "Se souvenir de moi"
          if (rememberMe) {
            localStorage.setItem("remember_admin", "true");
          } else {
            localStorage.removeItem("remember_admin");
          }

          // Redirection vers le dashboard
          window.location.href = "/admin/dashboard";
        } else {
          // Erreur de connexion
          showError(
            data.message || "Identifiants incorrects ou accès non autorisé."
          );
        }
      } catch (error) {
        console.error("Erreur de connexion:", error);
        showError(
          "Erreur de connexion. Veuillez vérifier votre connexion internet et réessayer."
        );
      } finally {
        // Réactiver le bouton
        submitButton.disabled = false;
        submitButton.innerHTML = originalText;
      }
    });
  }

  // Fonction pour afficher les erreurs
  function showError(message) {
    const errorDiv = document.getElementById("errorMessage");
    const errorText = document.getElementById("errorText");

    if (!errorDiv || !errorText) return;

    errorText.textContent = message;
    errorDiv.classList.remove("hidden");

    // Masquer l'erreur après 5 secondes
    setTimeout(() => {
      errorDiv.classList.add("hidden");
    }, 5000);
  }

  // Animation d'entrée
  function initializeAnimations() {
    const form = document.querySelector(".bg-white\\/90");
    if (!form) return;

    form.style.opacity = "0";
    form.style.transform = "translateY(20px)";

    setTimeout(() => {
      form.style.transition = "all 0.6s ease-out";
      form.style.opacity = "1";
      form.style.transform = "translateY(0)";
    }, 100);
  }

  // Initialisation après vérification de l'authentification
  setTimeout(initializeAnimations, 100);

  // Rendre les fonctions globales pour l'utilisation dans le HTML
  window.togglePassword = togglePassword;
</script>

<style>
  /* Animations personnalisées */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-in-up {
    animation: fadeInUp 0.6s ease-out;
  }

  /* Effet de focus amélioré */
  input:focus {
    box-shadow: 0 0 0 3px rgba(74, 124, 89, 0.1);
  }

  /* Effet de survol sur les boutons */
  button:hover:not(:disabled) {
    transform: translateY(-1px);
  }

  button:active:not(:disabled) {
    transform: translateY(0);
  }

  /* Animation du spinner */
  .animate-spin {
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  /* Transitions fluides pour les erreurs */
  .transition-all {
    transition: all 0.3s ease;
  }
</style>
