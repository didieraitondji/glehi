---
interface Testimonial {
  id: number;
  text: string;
  rating: number;
  author: string;
  role: string;
  avatar: string;
}

const testimonials: Testimonial[] = [
  {
    id: 1,
    text: "Simple et efficace ! J'ai vendu tous mes mangues en un temps record.",
    rating: 4,
    author: "Aminata",
    role: "Productrice de ma√Øs √† Parakou",
    avatar: "üë©üèæ‚Äçüåæ",
  },
  {
    id: 2,
    text: "La recherche est ultra-rapide, je trouve tout ce dont j'ai besoin pr√®s de chez moi.",
    rating: 4,
    author: "Moussa",
    role: "Acheteur",
    avatar: "üë®üèæ‚Äçüíº",
  },
  {
    id: 3,
    text: "Paiement mobile int√©gr√©, c'est super pratique. Plus besoin de monnaie !",
    rating: 4,
    author: "Donatienne",
    role: "Restauratrice",
    avatar: "üë©üèæ‚Äçüç≥",
  },
];
---

<section class="testimonials-section">
  <div class="container">
    <div class="background-decoration"></div>

    <div class="header">
      <div class="badge">T√©moignages</div>
      <h2>Ce qu'ils Disent de <span class="brand">GL√âHI</span></h2>
      <p class="subtitle">
        La meilleure preuve de notre impact, ce sont les voix de ceux qui
        utilisent d√©j√† AgriMarket+.
      </p>
    </div>

    <div class="testimonials-container">
      <button
        class="nav-button prev"
        id="prevBtn"
        aria-label="T√©moignage pr√©c√©dent"
      >
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
          <path
            d="M15 18L9 12L15 6"
            stroke="currentColor"
            stroke-width="2.5"
            stroke-linecap="round"
            stroke-linejoin="round"></path>
        </svg>
      </button>

      <div class="testimonials-wrapper">
        <div class="testimonials-track" id="testimonialsTrack">
          {
            testimonials.map((testimonial: Testimonial) => (
              <div
                class="testimonial-card"
                data-testimonial-id={testimonial.id}
              >
                <div class="card-glow" />

                <div class="quote-icon">
                  <svg width="28" height="22" viewBox="0 0 32 24" fill="none">
                    <path
                      d="M0 13.3333C0 6.55556 2.98667 2.66667 8.96 0L10.6667 2.66667C7.68 4.44444 5.33333 6.22222 4.26667 8C5.33333 8 6.4 8.88889 6.4 10.6667V18.6667C6.4 20.4444 5.33333 21.3333 3.2 21.3333H3.2C1.06667 21.3333 0 20.4444 0 18.6667V13.3333ZM21.3333 13.3333C21.3333 6.55556 24.32 2.66667 30.2933 0L32 2.66667C29.0133 4.44444 26.6667 6.22222 25.6 8C26.6667 8 27.7333 8.88889 27.7333 10.6667V18.6667C27.7333 20.4444 26.6667 21.3333 24.5333 21.3333H24.5333C22.4 21.3333 21.3333 20.4444 21.3333 18.6667V13.3333Z"
                      fill="currentColor"
                    />
                  </svg>
                </div>

                <p class="testimonial-text">{testimonial.text}</p>

                <div class="rating">
                  {Array.from({ length: 5 }, (_, i: number) => (
                    <span
                      class={`star ${i < testimonial.rating ? "filled" : ""}`}
                      aria-hidden="true"
                    >
                      ‚òÖ
                    </span>
                  ))}
                  <span class="sr-only">
                    {testimonial.rating} √©toiles sur 5
                  </span>
                </div>

                <div class="author-info">
                  <div class="avatar">{testimonial.avatar}</div>
                  <div class="author-details">
                    <h4 class="author-name">{testimonial.author}</h4>
                    <p class="author-role">{testimonial.role}</p>
                  </div>
                </div>
              </div>
            ))
          }
        </div>
      </div>

      <button
        class="nav-button next"
        id="nextBtn"
        aria-label="T√©moignage suivant"
      >
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
          <path
            d="M9 18L15 12L9 6"
            stroke="currentColor"
            stroke-width="2.5"
            stroke-linecap="round"
            stroke-linejoin="round"></path>
        </svg>
      </button>
    </div>

    <div
      class="dots-indicator"
      id="dotsIndicator"
      role="tablist"
      aria-label="Navigation des t√©moignages"
    >
      {
        testimonials.map((_, index: number) => (
          <button
            class={`dot ${index === 0 ? "active" : ""}`}
            data-index={index}
            role="tab"
            aria-selected={index === 0}
            aria-label={`T√©moignage ${index + 1}`}
          />
        ))
      }
    </div>
  </div>
</section>

<style>
  .testimonials-section {
    padding: 120px 20px;
    background: linear-gradient(135deg, #f7fdf4 0%, #ffffff 50%, #f1f8f1 100%);
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Inter",
      sans-serif;
    position: relative;
    overflow: hidden;
  }

  .background-decoration {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-image: radial-gradient(
        circle at 20% 20%,
        rgba(90, 138, 58, 0.03) 0%,
        transparent 50%
      ),
      radial-gradient(
        circle at 80% 80%,
        rgba(124, 179, 66, 0.04) 0%,
        transparent 50%
      ),
      radial-gradient(
        circle at 40% 60%,
        rgba(90, 138, 58, 0.02) 0%,
        transparent 50%
      );
    pointer-events: none;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    position: relative;
  }

  .header {
    text-align: center;
    margin-bottom: 80px;
    animation: fadeInUp 0.8s ease-out;
  }

  .badge {
    display: inline-block;
    background: linear-gradient(135deg, #5a8a3a, #7cb342);
    color: white;
    padding: 8px 20px;
    border-radius: 50px;
    font-size: 0.85rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin-bottom: 24px;
    box-shadow: 0 4px 20px rgba(90, 138, 58, 0.2);
  }

  .header h2 {
    font-size: clamp(2rem, 4vw, 3rem);
    font-weight: 800;
    color: #1a202c;
    margin-bottom: 20px;
    line-height: 1.1;
    background: linear-gradient(135deg, #1a202c 0%, #2d3748 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .brand {
    color: #5a8a3a;
    position: relative;
    background: linear-gradient(135deg, #5a8a3a, #7cb342);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .brand::after {
    content: "";
    position: absolute;
    bottom: -6px;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, #5a8a3a, #7cb342);
    border-radius: 2px;
    animation: underlineGlow 1.5s ease-out 0.5s both;
  }

  .subtitle {
    font-size: 1.2rem;
    color: #64748b;
    max-width: 650px;
    margin: 0 auto;
    line-height: 1.7;
    font-weight: 400;
  }

  .testimonials-container {
    position: relative;
    display: flex;
    align-items: center;
    gap: 32px;
  }

  .testimonials-wrapper {
    flex: 1;
    overflow: hidden;
    border-radius: 24px;
    position: relative;
  }

  .testimonials-track {
    display: flex;
    transition: transform 0.7s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  .testimonial-card {
    min-width: 100%;
    background: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(20px);
    padding: 48px;
    border-radius: 24px;
    box-shadow:
      0 25px 50px rgba(90, 138, 58, 0.08),
      0 8px 25px rgba(0, 0, 0, 0.03),
      inset 0 1px 0 rgba(255, 255, 255, 0.8);
    border: 1px solid rgba(90, 138, 58, 0.08);
    position: relative;
    transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  .card-glow {
    position: absolute;
    inset: -1px;
    border-radius: 24px;
    background: linear-gradient(
      135deg,
      rgba(90, 138, 58, 0.1),
      rgba(124, 179, 66, 0.1)
    );
    opacity: 0;
    transition: opacity 0.4s ease;
    pointer-events: none;
  }

  .testimonial-card:hover {
    transform: translateY(-8px) scale(1.02);
    box-shadow:
      0 35px 70px rgba(90, 138, 58, 0.12),
      0 15px 35px rgba(0, 0, 0, 0.05);
  }

  .testimonial-card:hover .card-glow {
    opacity: 1;
  }

  .quote-icon {
    color: #5a8a3a;
    margin-bottom: 28px;
    opacity: 0.7;
    filter: drop-shadow(0 2px 4px rgba(90, 138, 58, 0.1));
  }

  .testimonial-text {
    font-size: 1.3rem;
    line-height: 1.8;
    color: #1a202c;
    margin-bottom: 32px;
    font-weight: 400;
    letter-spacing: -0.02em;
  }

  .rating {
    display: flex;
    align-items: center;
    gap: 6px;
    margin-bottom: 32px;
  }

  .star {
    font-size: 1.4rem;
    color: #e2e8f0;
    transition: all 0.3s ease;
    filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.1));
  }

  .star.filled {
    color: #5a8a3a;
    animation: starGlow 0.5s ease-in-out;
  }

  .author-info {
    display: flex;
    align-items: center;
    gap: 20px;
    padding-top: 32px;
    border-top: 1px solid rgba(226, 232, 240, 0.6);
  }

  .avatar {
    width: 64px;
    height: 64px;
    border-radius: 20px;
    background: linear-gradient(135deg, #5a8a3a, #7cb342);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.6rem;
    box-shadow:
      0 8px 25px rgba(90, 138, 58, 0.3),
      inset 0 1px 0 rgba(255, 255, 255, 0.2);
    transition: all 0.3s ease;
  }

  .testimonial-card:hover .avatar {
    transform: scale(1.1) rotate(5deg);
  }

  .author-details h4 {
    font-size: 1.2rem;
    font-weight: 700;
    color: #1a202c;
    margin: 0 0 6px 0;
    letter-spacing: -0.02em;
  }

  .author-details p {
    font-size: 1rem;
    color: #64748b;
    margin: 0;
    font-weight: 500;
  }

  .nav-button {
    width: 56px;
    height: 56px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(20px);
    border: 2px solid rgba(90, 138, 58, 0.2);
    color: #5a8a3a;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    box-shadow:
      0 8px 25px rgba(90, 138, 58, 0.1),
      0 3px 12px rgba(0, 0, 0, 0.05);
    z-index: 2;
  }

  .nav-button:hover {
    background: linear-gradient(135deg, #5a8a3a, #7cb342);
    color: white;
    transform: scale(1.15);
    box-shadow:
      0 12px 35px rgba(90, 138, 58, 0.25),
      0 6px 18px rgba(0, 0, 0, 0.1);
    border-color: transparent;
  }

  .nav-button:active {
    transform: scale(1.05);
  }

  .dots-indicator {
    display: flex;
    justify-content: center;
    gap: 16px;
    margin-top: 50px;
  }

  .dot {
    width: 14px;
    height: 14px;
    border-radius: 50%;
    background: rgba(203, 213, 224, 0.6);
    border: none;
    cursor: pointer;
    transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    position: relative;
  }

  .dot::before {
    content: "";
    position: absolute;
    inset: -4px;
    border-radius: 50%;
    background: linear-gradient(135deg, #5a8a3a, #7cb342);
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .dot.active {
    background: linear-gradient(135deg, #5a8a3a, #7cb342);
    transform: scale(1.3);
    box-shadow: 0 4px 12px rgba(90, 138, 58, 0.3);
  }

  .dot:hover:not(.active) {
    background: #7cb342;
    transform: scale(1.15);
  }

  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(40px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes underlineGlow {
    from {
      transform: scaleX(0);
      opacity: 0;
    }
    to {
      transform: scaleX(1);
      opacity: 1;
    }
  }

  @keyframes starGlow {
    0%,
    100% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.2);
    }
  }

  @media (max-width: 768px) {
    .testimonials-section {
      padding: 80px 16px;
    }

    .header {
      margin-bottom: 60px;
    }

    .testimonial-card {
      padding: 36px 28px;
    }

    .nav-button {
      display: none;
    }

    .testimonials-container {
      flex-direction: column;
      gap: 0;
    }

    .testimonials-wrapper {
      width: 100%;
    }

    .author-info {
      gap: 16px;
    }

    .avatar {
      width: 56px;
      height: 56px;
      font-size: 1.4rem;
    }
  }

  @media (max-width: 480px) {
    .testimonial-card {
      padding: 28px 20px;
    }

    .testimonial-text {
      font-size: 1.1rem;
    }
  }
</style>

<script>
  interface TestimonialsCarouselOptions {
    autoPlayDelay?: number;
  }

  class TestimonialsCarousel {
    private currentIndex: number = 0;
    private testimonials: NodeListOf<Element>;
    private totalTestimonials: number;
    private track: HTMLElement | null;
    private prevBtn: HTMLElement | null;
    private nextBtn: HTMLElement | null;
    private dots: NodeListOf<Element>;
    private autoPlayInterval: number | null = null;
    private options: TestimonialsCarouselOptions;

    constructor(options: TestimonialsCarouselOptions = {}) {
      this.options = { autoPlayDelay: 5000, ...options };
      this.testimonials = document.querySelectorAll(".testimonial-card");
      this.totalTestimonials = this.testimonials.length;
      this.track = document.getElementById("testimonialsTrack");
      this.prevBtn = document.getElementById("prevBtn");
      this.nextBtn = document.getElementById("nextBtn");
      this.dots = document.querySelectorAll(".dot");

      this.init();
    }

    private init(): void {
      this.prevBtn?.addEventListener("click", () => this.prev());
      this.nextBtn?.addEventListener("click", () => this.next());

      this.dots.forEach((dot, index) => {
        dot.addEventListener("click", () => this.goTo(index));
      });

      // Auto-play
      this.startAutoPlay();

      // Pause on hover
      const section = document.querySelector(".testimonials-section");
      section?.addEventListener("mouseenter", () => this.stopAutoPlay());
      section?.addEventListener("mouseleave", () => this.startAutoPlay());

      // Touch/swipe support
      this.addTouchSupport();
    }

    private updateCarousel(): void {
      if (!this.track) return;

      const translateX = -this.currentIndex * 100;
      this.track.style.transform = `translateX(${translateX}%)`;

      // Update dots
      this.dots.forEach((dot, index) => {
        const isActive = index === this.currentIndex;
        dot.classList.toggle("active", isActive);
        (dot as HTMLElement).setAttribute("aria-selected", isActive.toString());
      });
    }

    public next(): void {
      this.currentIndex = (this.currentIndex + 1) % this.totalTestimonials;
      this.updateCarousel();
    }

    public prev(): void {
      this.currentIndex =
        (this.currentIndex - 1 + this.totalTestimonials) %
        this.totalTestimonials;
      this.updateCarousel();
    }

    public goTo(index: number): void {
      if (index >= 0 && index < this.totalTestimonials) {
        this.currentIndex = index;
        this.updateCarousel();
      }
    }

    private startAutoPlay(): void {
      this.stopAutoPlay();
      this.autoPlayInterval = window.setInterval(() => {
        this.next();
      }, this.options.autoPlayDelay);
    }

    private stopAutoPlay(): void {
      if (this.autoPlayInterval) {
        clearInterval(this.autoPlayInterval);
        this.autoPlayInterval = null;
      }
    }

    private addTouchSupport(): void {
      if (!this.track) return;

      let startX = 0;
      let startY = 0;
      let isDragging = false;

      this.track.addEventListener("touchstart", (e: TouchEvent) => {
        startX = e.touches[0].clientX;
        startY = e.touches[0].clientY;
        isDragging = true;
        this.stopAutoPlay();
      });

      this.track.addEventListener("touchmove", (e: TouchEvent) => {
        if (!isDragging) return;
        e.preventDefault();
      });

      this.track.addEventListener("touchend", (e: TouchEvent) => {
        if (!isDragging) return;
        isDragging = false;

        const endX = e.changedTouches[0].clientX;
        const endY = e.changedTouches[0].clientY;
        const deltaX = startX - endX;
        const deltaY = Math.abs(startY - endY);

        // Only handle horizontal swipes
        if (Math.abs(deltaX) > 50 && deltaY < 100) {
          if (deltaX > 0) {
            this.next();
          } else {
            this.prev();
          }
        }

        this.startAutoPlay();
      });
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener("DOMContentLoaded", () => {
    new TestimonialsCarousel();
  });
</script>
